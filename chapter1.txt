# Chapter 1 - Hello World

Let's imagine the following situation in a Payment system:

- We should call the Payment Service to get some information
- It can not take more than 5 seconds
- If it takes more than 5 seconds, another Payment Service must be called as a fallback

We will have 2 Payment Services

- PayPal that is the default payment 
- Stripes that is the fallback payment in case that PayPal is out

```java
public class PaymentPayPalService {

	public String getProvider() {
		return "PayPal";
	}

}
```

And the Stripes provider

```java
public class PaymentServiceStripesFallback {

	public String getProvider() {
		return "Stripes";
	}

}
```

Easy until now.

Now we will create a class that calls the desired PaymentService

```java
public class Payment {

	private PaymentPayPalService paymentService;

	public Payment(PaymentPayPalService paymentService) {
		this.paymentService = paymentService;
	}

	public String getPaymentProvider() {
		return paymentService.getProvider();
	}

}
```

Better test it with...a Test, isn't it?

```java
public class PaymentServiceTest {

	@Test
	public void shouldCallThePaymentServiceDefault() throws Exception {
		PaymentPayPalService paymentService = new PaymentPayPalService();

		Payment payment = new Payment(paymentService);

		String paymentProvider = payment.getPaymentProvider();

		assertEquals("PayPal", paymentProvider);
	}

}
```

Our test is passing perfect! Now, let's simulate a problem, causing a timeout.

Just to reuse the "timeout" code, let's create a Pause class: 

```java
public class Pause {

	public static void waitFor(int timeInSeconds) {
		try {
			TimeUnit.SECONDS.sleep(timeInSeconds);
		} catch (InterruptedException e) {
			throw new RuntimeException("Error on Pause");
		}
	}

}
```

Now, let's modify the Payment class:

```java
public class PaymentPayPalService {

	public String getProvider() {
		Pause.waitFor(5);

		return "PayPal";
	}

}
```

Running the test...and...it took 5 seconds! Terrible for our business! 

Hystrix comes in!

Hystrix has the concept of a **Command** that must be used when we would like to wrap a logic that should
be treat by Hystrix. 

We should use the **HystrixCommand** or **HystrixObservableCommand** class.

So, let's wrap the PaymentService:

```java
public class Payment extends HystrixCommand<String> {

	private PaymentPayPalService paymentService;

	public Payment(PaymentPayPalService paymentService) {
		super(HystrixCommandGroupKey.Factory.asKey("PayPal"));
		this.paymentService = paymentService;
	}

	@Override
	protected String run() throws Exception {
		return paymentService.getProvider();
	}

}
```

Remove the line that simulates the timeout and let's update our test:

```java
@Test
public void shouldCallThePaymentServiceDefault() throws Exception {
	PaymentPayPalService paymentService = new PaymentPayPalService();

	HystrixCommand<String> payment = new Payment(paymentService);

	String paymentProvider = payment.execute();

	assertEquals("PayPal", paymentProvider);
}
```

Awesome! Everything is ok.

Let's add the **Pause** again and let's run the code again:

Terrible! An error occurred:

```
com.netflix.hystrix.exception.HystrixRuntimeException: Payment timed-out and no fallback available.
	at com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:819)
	...
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.util.concurrent.TimeoutException
	at com.netflix.hystrix.AbstractCommand.handleTimeoutViaFallback(AbstractCommand.java:997)
	at com.netflix.hystrix.AbstractCommand.access$500(AbstractCommand.java:60)
	at com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:610)
	at com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:601)
	at rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)
	... 15 more

```

Notice the message:

- Hystrix didn't wait 5 seconds
- Hystrix identified that a Timeout occurred while calling the service

Important thing here:

- Hystrix failed fast!

By default, Hystrix waits just **1 second** before throw an exception. Don't worry, we can change it.

